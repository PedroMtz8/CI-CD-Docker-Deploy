name:  Deploy CI/CD Pipeline 🚀
on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]

jobs:
  create-docker-image:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_DEPLOY }}

      # - name: Determine Image Name
      #   id: image_name
      #   run: echo ::set-output name=name::payments${{ if eq(github.ref, 'refs/heads/develop') }}-dev{{ endif }}

      - name: Determine Branch Name
        id: branch_name
        run: echo ::set-output name=branch::$(basename ${{ github.ref }})

      - name: Build Docker Image
        run: |
          if [ "${{ steps.branch_name.outputs.branch }}" == "master" ]; then
            docker build . --tag ghcr.io/onecarnow/payments:latest
          else
            docker build . --tag ghcr.io/onecarnow/payments-dev:latest
          fi

      - name: Push Docker Image
        run: |
          if [ "${{ steps.branch_name.outputs.branch }}" == "master" ]; then
            docker push ghcr.io/onecarnow/payments:latest
          else
            docker push ghcr.io/onecarnow/payments-dev:latest
          fi
    
  devDeploy: 
    if: github.ref == 'refs/heads/develop'
    needs: create-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{ vars.PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa ${{ vars.DEV_IP }} >> ~/.ssh/known_hosts

      - name: SSH to remote server and execute script
        run: |
          ssh -i ~/.ssh/id_rsa -o "StrictHostKeyChecking=no" ${{ vars.AUTH_SERVER_DEV }} << EOF
          echo "SSH into server..."

          echo "Docker Login..."
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.TOKEN_DEPLOY }}

          echo "Delete old container..."
          CONTAINER_NAME="payments-dev"
          # Verificar si el contenedor existe antes de intentar detenerlo y eliminarlo
          if docker ps -a --format '{{.Names}}' | grep -Eq "^\$CONTAINER_NAME$"; then
            docker stop \$CONTAINER_NAME
            docker rm \$CONTAINER_NAME
            echo "Container \$CONTAINER_NAME stopped and removed."
          else
            echo "Container \$CONTAINER_NAME does not exist."
          fi

          echo "Docker into SSH..."
          docker pull ghcr.io/onecarnow/payments-dev:latest
          docker run -d -p 4000:4000 \
            --name \$CONTAINER_NAME \
            --env-file ${{ vars.ENV_PATH }} \
            ghcr.io/onecarnow/payments-dev:latest

          echo "Clean Docker artifacts..."
          # Eliminar contenedores detenidos
          docker container prune -f

          # Eliminar imágenes sin etiqueta, si las hay
          DOCKER_IMAGES=\$(docker images -q -f "dangling=true")
          if [ -n "\$DOCKER_IMAGES" ]; then
            echo "Eliminando imágenes sin etiqueta..."
            echo "\$DOCKER_IMAGES" | xargs docker rmi -f
          else
            echo "No hay imágenes sin etiqueta para eliminar."
          fi
          EOF

  prodDeploy: 
    if: github.ref == 'refs/heads/master'
    needs: create-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
            mkdir -p ~/.ssh
            echo "${{ vars.PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa ${{ vars.PROD_IP }} >> ~/.ssh/known_hosts

      - name: SSH to remote server and execute script
        run: |
          ssh -i ~/.ssh/id_rsa -o "StrictHostKeyChecking=no" ${{ vars.AUTH_SERVER_PROD }} << EOF
          echo "SSH into server..."

          echo "Docker Login..."
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.TOKEN_DEPLOY }}

          echo "Delete old container..."
          CONTAINER_NAME="payments"
          # Verificar si el contenedor existe antes de intentar detenerlo y eliminarlo
          if docker ps -a --format '{{.Names}}' | grep -Eq "^\$CONTAINER_NAME$"; then
            docker stop \$CONTAINER_NAME
            docker rm \$CONTAINER_NAME
            echo "Container \$CONTAINER_NAME stopped and removed."
          else
            echo "Container \$CONTAINER_NAME does not exist."
          fi

          echo "Docker into SSH..."
          docker pull ghcr.io/onecarnow/payments:latest
          docker run -d -p 4000:4000 \
            --name \$CONTAINER_NAME \
            --env-file ${{ vars.ENV_PATH }} \
            ghcr.io/onecarnow/payments:latest

          echo "Clean Docker artifacts..."
          # Eliminar contenedores detenidos
          docker container prune -f

          # Eliminar imágenes sin etiqueta, si las hay
          DOCKER_IMAGES=\$(docker images -q -f "dangling=true")
          if [ -n "\$DOCKER_IMAGES" ]; then
            echo "Eliminando imágenes sin etiqueta..."
            echo "\$DOCKER_IMAGES" | xargs docker rmi -f
          else
            echo "No hay imágenes sin etiqueta para eliminar."
          fi
          EOF